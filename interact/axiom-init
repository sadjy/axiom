#!/bin/bash

AXIOM_PATH="$HOME/.axiom"
DOCTL_CONFIG_PATH="$HOME/.config/doctl/config.yaml"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"

BASEOS="$(uname)"
provider="$(jq -r ".provider" "$AXIOM_PATH/axiom.json")"

function help() {
	echo -e "${BWhite}Usage of axiom-init${Color_Off}"
	echo -e "Example Usage: ${Blue}axiom-init bigstok${Color_Off}"
	echo -e "  <name> string (optional)"
	echo -e "    Name of the instance, supplied as a positional first argument"
	echo -e "  --deploy=<profile>"
	echo -e "    Deploy a profile after initialization (e.g masscan, nmap, gowitness, ffuf)"
	echo -e "  --restore=<backup>"
	echo -e "    Output to default output (whatever that is for the module)"
	echo -e "  --help"
	echo -e "    Display this help menu"
}

# function called by trap
other_commands() {
    tput setaf 1
    printf "\rExiting..."
    echo "Cleaning up created resources..."
    kill -9  "$PID"
    $AXIOM_PATH/interact/axiom-rm $gen_name -f
	echo "Thank you for using axiom :) - @pry0cc"
	exit
}

trap 'other_commands' SIGINT

if [[ "$provider" == "do" ]]; then
# Per doctl readme the config path differs on OSX: https://github.com/digitalocean/doctl#configuring-default-values
if [ $BASEOS == "Darwin" ]; then DOCTL_CONFIG_PATH=~/"Library/Application Support/doctl/config.yaml"; fi

if ! command -v doctl &> /dev/null
then
    echo -e "${BRed}Error: doctl could not be found. Please install it from the binary${No_Color}"
    exit
else
	token_length=$(cat "$DOCTL_CONFIG_PATH"  | grep access-token | wc -c | awk '{ print $1 }')
	if [[ "$token_length" -lt 32 ]];
	then
		echo -e "${Red}Warning: it looks like your doctl might not be configured with a token!${Color_Off}"
	fi
fi
fi

if ! command -v jq &> /dev/null
then
    echo -e "${BRed}Error: jq could not be found. Please install it.${No_Color}"
    exit
fi

gen_name="${names[$RANDOM % ${#names[@]}]}$((10 + RANDOM % 20))"
region="$(jq -r '.region' $AXIOM_PATH/axiom.json)"
size="$(jq -r '.default_size' $AXIOM_PATH/axiom.json)"
image="$(jq -r '.image' $AXIOM_PATH/axiom.json)"

box_name=""
connect_shell=false
restore=false
deploy=false
expire=false
default_expiry=525600000
quiet=false
domain=false
manual_image_id=false
user_region=""
no_select=false

if [ -z "$1" ] || [[ $1 =~ "image" ]] || [[ $1 =~ "shell" ]] || [[ $1 =~ "restore" ]] || [[ $1 =~ "deploy" ]] || [[ $1 =~ "size" ]] || [[ $1 =~ "expire" ]] || [[ $1 =~ "quiet" ]] | [[ $1 =~ "domain" ]]; then
	name="$gen_name"
else
	name="$1"
fi

for var in "$@"; do
	if [ "$var" == "--shell" ]; then
		connect_shell=true
	fi
	if [ "$var" == "--quiet" ]; then
		quiet=true
	fi
	if [ "$var" == "--no-select" ]; then
		no_select=true
	fi
	if [[ "$var" == "-h" ]] || [[ "$var" == "--help" ]];
    then
        help
        exit 0
    fi
	if [[ $var =~ "--restore" ]]; then
		restore="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		echo -e "${BWhite}Using restore backup '$restore'${Color_Off}"
	fi
	if [[ $var =~ "--uregion" ]]; then
		user_region="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		#echo -e "${BWhite}Using user region '$user_region'${Color_Off}"
	fi
	if [[ "$var" =~ "--deploy" ]]; then
		deploy="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		echo -e "${BWhite}Deploying '$deploy' after init${Color_Off}"
	fi
	if [[ "$var" =~ "--domain=" ]]; then
		domain="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		if [ "$quiet" != "true" ]; then
			echo -e "${BWhite}Manually setting domain to '$domain'${Color_Off}"
		fi
	fi
	if [[ "$var" =~ "--size" ]]; then
		size="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		if [ "$quiet" != "true" ]; then
			echo -e "${BWhite}Manually setting size to '$size'${Color_Off}"
		fi
	fi
	if [[ "$var" =~ "--image=" ]]; then
		image="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		if [ "$quiet" != "true" ]; then
			echo -e "${BWhite}Setting image to '$image'${Color_Off}"
		fi
	fi
	if [[ "$var" =~ "--image-id=" ]]; then
		manual_image_id="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		if [ "$quiet" != "true" ]; then
			echo -e "${BWhite}Setting image id to '$image'${Color_Off}"
		fi
	fi

	if [[ "$var" =~ "--expire" ]]; then
		expire="$(echo "$var" | sed 's/=/ /g' | awk '{ print $2 }')"
		default_expiry=${expire%\.*}
		if [ "$quiet" != "true" ]; then
			echo -e "${BWhite}Setting expiry to $expire minutes...(This is non-functional)${Color_Off}"
		fi
	fi
done


if [[ "$quiet" != "true" ]]; then
	"$NOTIFY_CMD" "Axiom Info" "Initializing '$name'..."
	echo -e "${BWhite}Initializing '$name'"
fi


image_name=""
if [[ "$image" != "null" ]]
then
	image_name="$image-$region"
else
	image_name="axiom-$region"
fi

image_id=""
if  [[ "$manual_image_id" != "false" ]]
then
	image_id="$manual_image_id"
else
	image_id="$(get_image_id "$image_name")"
fi

show_spinner() {
	local -r pid="${1}"
	# This delay is very carefully selected, as it makes makes the spinup feelfaster!!!
	local -r delay='0.48'
	# I picked 230 because it's slightly too high, you'll feel happy abouta fast spin time ;_
	i=420
	while ps a | awk '{print $1}' | grep -q "${pid}"; do
		echo -ne "${BWhite}>> T-Minus $i to full initialization...${Color_Off}\r"
		: $((i--))
		sleep "$delay"
	done
	printf "    \b\b\b\b"
}

waitabit() {
	local -r pid="${1}"
	# This delay is very carefully selected, as it makes makes the spinup feelfaster!!!
	local -r delay='0.38'
	# I picked 230 because it's slightly too high, you'll feel happy abouta fast spin time ;_
	i=420
	while ps a | awk '{print $1}' | grep -q "${pid}"; do
		: $((i--))
		sleep "$delay"
	done
	printf "    \b\b\b\b"
}

mkdir -p "$AXIOM_PATH/tmp/"

if [ -z "$image_id" ]; then
	echo -e "${BRed}An image has not been found in this region. Do you need to run 'axiom-build'?${Color_Off}"
	exit 1
fi


if [[ "$user_region" == "" ]]; then
	user_region="$region"
fi

create_instance "$name" "$image_id" "$size" "$user_region" &
PID="$!"
if [ "$quiet" != "true" ]; then
	show_spinner "$PID"
else
	waitabit "$PID"
fi

if [ "$quiet" != "true" ]; then
	secs=$((20))
	while [ $secs -gt 0 ]; do
		echo -ne "${BWhite}>> T-Minus $secs to full initialization...${Color_Off}\r"
		sleep 1
		: $((secs--))
	done
else
	sleep 20
fi

ip="$(instance_ip "$name")"
ssh-keygen -R "[$ip]:2266" >>  /dev/null 2>&1


if [[ "$no_select" != "true" ]]; then
	echo "$name" > $AXIOM_PATH/selected.conf
fi

if [[ "$no_select" != "true" ]]; then
	"$NOTIFY_CMD" "Axiom Info" "$name successfully initialized at $ip!"
fi
echo -e "${BWhite}Initialized instance '${BGreen}$name${Color_Off}${BWhite}' at '${BGreen}$ip${BWhite}'!"

if [ "$quiet" != "true" ]; then
	echo -e "${BWhite}To connect, run '${BGreen}axiom-ssh $name${Color_Off}'${BWhite} or '${BGreen}axiom-connect'${Color_Off}"
fi

axiom-exec "touch /tmp/.connected" "$name" -q >> /dev/null 2>&1

if [ "$restore" != false ]; then
	#echo -e "${BWhite}Waiting 65 seconds before restore...${Color_Off}"
	$AXIOM_PATH/interact/axiom-restore "$restore" "$name"
fi

if [ "$deploy" != false ]; then
	#echo -e "${BWhite}Waiting 65 seconds before deploy... ${Color_Off}"
	$AXIOM_PATH/interact/axiom-deploy "$deploy" "$name"
fi

#if [ "$domain" != false ]; then
##	echo -e "${BWhite}Adding DNS record $name.$domain to -> $ip"
#	$AXIOM_PATH/interact/axiom-dns add $name $domain $ip
#fi

$AXIOM_PATH/interact/header.sh

